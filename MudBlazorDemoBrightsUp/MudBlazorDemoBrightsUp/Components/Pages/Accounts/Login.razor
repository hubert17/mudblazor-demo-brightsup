@page "/"
@page "/login"
@rendermode InteractiveServer
@layout MudBlazorDemoBrightsUp.Components.Layout.LoginLayout
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazorDemoBrightsUp.DTOs
@using MudBlazorDemoBrightsUp.States

@inject IJSRuntime js
@inject NavigationManager NavManager 
@inject HttpClient httpClient
@inject AuthenticationStateProvider AuthStateProvider


<MudText Typo="Typo.h4" GutterBottom="true">Sign In</MudText>

<MudText>Don't have an account? <MudLink Href="/register">Sign Up</MudLink></MudText>

<MudTextField T="string" @bind-Value="@loginDto.Username" Label="E-mail" Variant="Variant.Outlined" Class="my-6"></MudTextField>

<MudTextField @bind-Value="@loginDto.Password" Label="Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />

<MudButton Variant="Variant.Filled" Class="mt-6" Color="Color.Primary" OnClick="LoginClicked" Size="Size.Large" FullWidth="true">Sign In</MudButton>

@if(invalidLogin)
{
    <MudAlert Severity="Severity.Error" Class="mt-8 mud-width-full" Style="max-width:500px;" Elevation="25">Invalid login. Please try again.</MudAlert>
}

@code {
    public LoginDTO loginDto = new();
    public record LoginResponse(string Username = null!, string Token = null!);
    bool invalidLogin = false;

    async Task LoginClicked()
    {
        var response = await httpClient.PostAsJsonAsync($"/TOKEN?username={loginDto.Username}&password={loginDto.Password}", loginDto);
        if(response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            customAuthStateProvider.UpdateAuthenticationState(result!.Token);            
            NavManager.NavigateTo("/home", forceLoad: true);
        }
        else
        {
            invalidLogin = true;
            return;
        }
    }


    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}