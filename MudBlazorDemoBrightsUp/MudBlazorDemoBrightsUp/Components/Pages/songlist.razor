@page "/songlist"
@rendermode InteractiveServer

@using MudBlazorDemoBrightsUp.DTOs
@using MudBlazorDemoBrightsUp.Models

@inject IJSRuntime js
@inject HttpClient httpClient

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Songs</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="song.Id" Label="Song ID" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="song.Title" Label="Title" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="song.Artist" Label="Phone Number" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Save Song</MudButton>
    </MudCardContent>
</MudCard>
<br />

<MudTable ServerData="@(new Func<TableState, Task<TableData<SongModel>>>(GetServerData))" Elevation="25" Dense="true" Hover="true" @bind-song="song" @ref="table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Songlist</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>ID</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Artist</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Artist">@context.Artist</MudTd>
        <MudTd DataLabel="">
            <MudFab OnClick="@(()=>Edit(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab OnClick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

    @code {
    private IEnumerable<SongModel> pagedData;
    private MudTable<SongModel> table;

    private int totalItems;
    private string searchString = null;

    private SongModel song = new SongModel();

    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>
    private async Task<TableData<SongModel>> GetServerData(TableState state)
    {
        var response = await httpClient.GetFromJsonAsync<SongDTO>($"/api/Song?page={state.Page + 1}&pageSize={state.PageSize}&search={searchString}");

        var songs = response.items;

        //table.Items = songs;

        //pagedData = songs.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();
        return new TableData<SongModel>() { TotalItems = songs.Count(), Items = songs.ToArray() };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private async void Save()
    {
        await js.InvokeVoidAsync("alert", "Hello");
        // customerService.SaveCustomer(song);
        // song = new SongModel();
        // snackBar.Add("Customer Saved.", Severity.Success);
        // GetCustomers();
    }
    private async void Edit(int id)
    {
        await js.InvokeVoidAsync("alert", "Hello " + id);
        song = table.Items.FirstOrDefault(c => c.Id == id);
    }
    private void Delete(int id)
    {
        // customerService.DeleteCustomer(id);
        // snackBar.Add("Customer Deleted.", Severity.Success);
        // GetCustomers();
    }
}